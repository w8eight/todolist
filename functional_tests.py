from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary
import time
import unittest


class NewVisitorTest(unittest.TestCase):

	def setUp(self):
		#Cannot add firefox binary to PATH (no admin privileges on employee computer)
		self.binary = FirefoxBinary(firefox_path = r'C:\Users\w23209\AppData\Local\Mozilla Firefox\firefox.exe')
		self.browser = webdriver.Firefox(firefox_binary=self.binary)

	def tearDown(self):
		self.browser.quit()

	def test_start_list_and_retrieve_later(self):
		#Someone wants to open new online to-do app. 
		#User is checking out its homepage
		self.browser.get('http://localhost:8000')
		
		#User sees that page title mention to-do list
		self.assertIn('To-Do', self.browser.title)
		header_text = self.browser.find_element_by_tag_name('h1').text
		self.assertIn('To_Do', header_text)

		#User is invited to enter a to-do item straight away
		inputbox = self.browser.find_element_by_id('id_new_item')
		self.assertEqual(
			inputbox.get_attribute('placeholder'),
			'Enter a to-do item'
			)

		#User types "Develop functional test for your to-do web app" into a text box
		inputbox.send_keys('Develop functional test for your to-do web app')

		#After user hits enter, the page updates, and now the page lists
		#1: Develop functional test for your to-do web app" as an item in a to-do list
		inputbox.send_keys(Keys.ENTER)
		time.sleep(1)

		table = self.browser.find_element_by_id('id_list_table')
		rows = table.find_elements_by_tag_name('tr')
		self.assertTrue(
			any(row.text == '1: Develop functional test for your to-do web app' for row in rows)
			)

		#Text box inviting user to add another item is stil visible
		#User enters "Use your test to check if app is working"

		#The page updates again, and now shows both items on the list

		#User list will be remembered and unique URL to the user list is generated by site
		#Some text which exlpain it

		#User visit the URL and list is still there

		#User closes the site

		self.fail('Finish the test!')




if __name__ == '__main__':
	unittest.main(warnings='ignore')
